name: Cross-Platform KrakenRelay Builds

on:
  push:
    branches: [ main ]            # CI builds on main
    tags: [ "v*.*.*" ]            # Release builds on version tags
  workflow_dispatch:

env:
  APP_NAME: krakenrelay

jobs:
  windows:
    name: ü™ü Build on Windows
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller numpy scipy pyqt5 pyqtgraph pyaudio pyyaml

      - name: Build .exe
        run: pyinstaller --onefile --name $env:APP_NAME main.py

      - name: Upload Windows Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows
          path: dist/${{ env.APP_NAME }}.exe

  macos:
    name: üçè Build on macOS
    runs-on: macos-latest
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          brew install portaudio
          pip install --upgrade pip
          pip install pyinstaller numpy scipy pyqt5 pyqtgraph pyaudio pyyaml

      - name: Build macOS binary
        run: pyinstaller --onefile --add-binary "/opt/homebrew/lib/libportaudio.2.dylib:." --name $APP_NAME main.py

      - name: Upload macOS Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos
          path: dist/${{ env.APP_NAME }}

  linux-docker:
    name: üêß Build Linux Binary + (tagged) Docker Image
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write       # needed to push to GHCR on tags
    steps:
      - uses: actions/checkout@v4

      - name: Build container (uses your multi-stage Dockerfile)
        run: docker build -t ${{ env.APP_NAME }} .

      - name: Extract Linux binary from image
        run: |
          id=$(docker create ${{ env.APP_NAME }})
          docker cp "$id":/usr/local/bin/app "./${{ env.APP_NAME }}"
          docker rm -v "$id"
          chmod +x "./${{ env.APP_NAME }}"

      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux
          path: ./${{ env.APP_NAME }}

      # Push container image only for tags
      - name: Set up Docker Buildx
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image (tags only)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ env.APP_NAME }}:latest
            ghcr.io/${{ github.repository }}/${{ env.APP_NAME }}:${{ github.ref_name }}

  release:
    name: üì¶ Publish GitHub Release (tags only)
    runs-on: ubuntu-latest
    needs: [windows, macos, linux-docker]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      actions: read         # download artifacts
      contents: write       # create the release & upload assets
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/${{ env.APP_NAME }}-windows/${{ env.APP_NAME }}.exe
            artifacts/${{ env.APP_NAME }}-macos/${{ env.APP_NAME }}
            artifacts/${{ env.APP_NAME }}-linux/${{ env.APP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
